#include <iostream>
#include <cstring>
#include <algorithm>
#include <ctime>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <cmath>
#include <list>
#include <bitset>
#include <queue>
#include <stack>
#include <iomanip>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
#define x first
#define y second
 
using namespace __gnu_pbds;
using namespace std;
 
typedef tree<
    int,
    null_type,
    less_equal<int>,
    rb_tree_tag,
    tree_order_statistics_node_update>
ordered_set;
typedef long long LL;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
typedef pair<double, double> PDD;
 
const int N = 1e5 + 10;
const int M = 1000010;
const int INF = 0x3f3f3f3f;
const int mod = 1e9 + 7;
const double eps = 1e-6;
 
vector <int> h[N];
int a[N], k, cnt = 0;
bool vis[N];
int val[N];
 
void dfs (int u, int fa)
{
    val[u] = a[u];
    for (int i = 0; i < h[u].size(); i ++) 
    {
        int j = h[u][i];
        if (j == fa) continue;
        dfs (j, u);
        val[u] ^= val[j];
        vis[u] |= vis[j];
    }
    if (val[u] == k && !vis[u] || !val[u] && vis[u]) cnt ++;
    if (val[u] == k) vis[u] = true;
    
}
 
bool solve ()
{
    int n, x; cin >> n >> x;
    k = 0;
    for (int i = 1; i <= n; i ++) 
    {
        cin >> a[i];
        k ^= a[i];
    }
    cnt = 0;
    for (int i = 1; i < n; i ++) 
    {
        int a, b; cin >> a >> b;
        h[a].push_back (b);
        h[b].push_back (a);
    }
    
    dfs (1, -1);
 
    for (int i = 1; i <= n; i ++) 
    {
        vis[i] = val[i] = a[i] = 0;
        h[i].clear();
    }
 
    if (k && x <= 2) return false;
    if (!k || cnt >= 2)  return true;
    return false;
 
}
 
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    cout << fixed << setprecision(7);
    int T; cin >> T;
    for (int o = 1; o <= T; o ++)
    {
        if (solve ()) cout << "YES\n";
        else cout << "NO\n";
    }
    return 0;
}
